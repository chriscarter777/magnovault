@{
     ViewBag.Title = "Documentation";
}

<h1 class="doc-title">Documentation</h1>

<h5 style="color:green;">MagnoVault website, administration, and database created by</h5>
<address>
     Christopher Carter<br />
     <span style="font-family:'Engravers MT';">Perficiat</span><br />
     Portland, OR<br />
     christopher.carter.777@gmail.com<br />
     (503) 407-9500<br />
</address>

<h3 class="documentation-header">Shared Projects</h3>
<section>
     <h4>magnovault.AuthorizeNet</h4>
     <p>Contains the classes necessary to submit and refund charges via Authorize.Net</p>
     <p>The authorization keys are not found here, however: they are held in Web.config (duplicated in .Admin and .Site), so are passed to the functions from the caller.</p>
     <p>To avoid a naming collision, the namespace for magnovault.AuthorizeNet is actually magnovault.Authorize.Net</p>
     <h4>magnovault.Data</h4>
     <p>Contains:</p>
     <ul>
          <li><b>ApplicationDbContext</b>: the database context for the Microsoft Identity store</li>
          <li><b>DataDbContext</b>: the database context for the application's domain data</li>
          <li><b>MagnovaultDbRepository</b>: the repository class interacting with the domain data</li>
     </ul>
     <h4>magnovault.Models</h4>
     <p>All shared models are found here, including the ApplicationUser which implements IdentityUser</p>
     <p>Note there are three versions of Order and OrderItem:</p>
     <ul>
          <li>The base class, <b>Order</b>, represents the database objects.</li>
          <li><b>ViewOrder</b> is the class returned by the repository and ultimately sent to the view.  To the base class, it adds information joined from other tables.</li>
          <li><b>AjaxOrder</b> is a stripped-down version containing only information required for the AJAX call to calculate the order subtotal.</li>
     </ul>
     <h4>magnovault.Utilities</h4>
     <p>Contains:</p>
     <ul>
          <li><b>Emailer</b>: sends notification emails.  As with AuthorizeNet, the SMPT authorization information is held in Web.config, and passed by the caller.</li>
          <li><b>OrderCalculator</b>: to avoid inconsistencies, order prices are always calculated by this "single source of truth:" class.  Its logic can be customized based on customer location, tax tables, and the active campaign.  Customization should generally be applied to the Adjustments line.</li>
     </ul>
</section>

<h3 class="documentation-header">magnovault.Site</h3>
<section>
     <p>The website is built as a SPA using ASP.NET 4.6.  Views are contained within <b>article</b>s which are hidden and unhidden.</p>
     <p>All page logic is contained in JavaScript/jQuery contained in <b>_Layout.cshtml</b></p>
     <p>Actions are handled by a combination of AJAX calls to the Home controller, and traditional form posts to the controller.</p>
     <p>The website supports optional login using Microsoft Identity user-level authentication.</p>
     <ul>
          <li>Login allows the contact and order forms to be pre-populated for user convenience, and allows orders to be saved rather than submitted.</li>
          <li>If a user is signed in, the order page will be populated with their most recent saved order.</li>
     </ul>
</section>

<h3 class="documentation-header">magnovault.Admin</h3>
<section>
     <p>The administration site is built in ASP.NET Framework 4.6, and is secured using Microsoft Identity user-level authentication.  It uses the same API to transfer data to/from the database</p>
     <p>Unity, providing Dependency Injection, was removed because of fatal interactions with the Microsoft.Identity code.</p>
     <p>Password validation rules are configured in App_Start.IdentityConfig, and are all deactivated for convenience.  It is the user's responsibility, then, to ensure their password is sufficiently strong.</p>
     <p>Where customer info is presented, an asterisk marks the preferred contact method.</p>
     <p>The <b>Add Order</b> and <b>Edit Order</b> methods calculate the ViewOrderItem.UnitPrice and LineTotal, and ViewOrder.Subtotal, Tax, ShipHand and Total amounts on demand, and these are persisted in the database as a permanent record of the quoted amounts.</p>
     <p>Note this results in these tables being de-normalized.</p>
     Dependencies:
     <ul>
          <li>Entity Framework</li>
          <li>Microsoft.Owin</li>
          <li>Newtonsoft.Json</li>
     </ul>
</section>

<h3 class="documentation-header">magnovaultdata</h3>
<section>
     <p>A Microsoft SQL Server database containing both domain data tables and user identity tables:</p>
     <ul>
          <li>BusinessRules (single record is used as a key-value store)</li>
          <li>Products</li>
          <li>Orders</li>
          <li>OrderItems</li>
          <li>Instruments</li>
          <li>InvestorContacts</li>
          <li>MediaContacts</li>
          <li>PublicContacts</li>
          <li>RetailContacts</li>
          <li>TaxRates (62 rates, for all US states and territories.  Autopopulated with 7.5% on first use of <b>magnovaultapi.ValuesController.GetTaxRates</b> or <b>.GetTaxRate</b>, using <b>magnovaultapi.MagnoVaultContext.DefaultRates</b>.) </li>
          <li>Users (this table holds <b>ApplicationUser</b> objects. <b>Customer</b> domain objects are also constructed from this table: <b>Customers</b> are <b>ApplicationUsers</b> without security-sensitive properties like PasswordHash</li>

     </ul>
</section>